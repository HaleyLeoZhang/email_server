// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package bo

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonB3bcdb0DecodeGithubComHaleyLeoZhangEmailServerModelBo(in *jlexer.Lexer, out *Smtp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "subject":
			out.Subject = string(in.String())
		case "sender_name":
			out.SenderName = string(in.String())
		case "body":
			out.Body = string(in.String())
		case "receiver":
			if in.IsNull() {
				in.Skip()
				out.Receiver = nil
			} else {
				in.Delim('[')
				if out.Receiver == nil {
					if !in.IsDelim(']') {
						out.Receiver = make([]string, 0, 4)
					} else {
						out.Receiver = []string{}
					}
				} else {
					out.Receiver = (out.Receiver)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Receiver = append(out.Receiver, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "receiver_name":
			if in.IsNull() {
				in.Skip()
				out.ReceiverName = nil
			} else {
				in.Delim('[')
				if out.ReceiverName == nil {
					if !in.IsDelim(']') {
						out.ReceiverName = make([]string, 0, 4)
					} else {
						out.ReceiverName = []string{}
					}
				} else {
					out.ReceiverName = (out.ReceiverName)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.ReceiverName = append(out.ReceiverName, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "attachment":
			if in.IsNull() {
				in.Skip()
				out.Attachment = nil
			} else {
				in.Delim('[')
				if out.Attachment == nil {
					if !in.IsDelim(']') {
						out.Attachment = make([]string, 0, 4)
					} else {
						out.Attachment = []string{}
					}
				} else {
					out.Attachment = (out.Attachment)[:0]
				}
				for !in.IsDelim(']') {
					var v3 string
					v3 = string(in.String())
					out.Attachment = append(out.Attachment, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "remark":
			if in.IsNull() {
				in.Skip()
				out.Remark = nil
			} else {
				in.Delim('[')
				if out.Remark == nil {
					if !in.IsDelim(']') {
						out.Remark = make([]string, 0, 4)
					} else {
						out.Remark = []string{}
					}
				} else {
					out.Remark = (out.Remark)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.Remark = append(out.Remark, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB3bcdb0EncodeGithubComHaleyLeoZhangEmailServerModelBo(out *jwriter.Writer, in Smtp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"subject\":"
		out.RawString(prefix[1:])
		out.String(string(in.Subject))
	}
	{
		const prefix string = ",\"sender_name\":"
		out.RawString(prefix)
		out.String(string(in.SenderName))
	}
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix)
		out.String(string(in.Body))
	}
	{
		const prefix string = ",\"receiver\":"
		out.RawString(prefix)
		if in.Receiver == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Receiver {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"receiver_name\":"
		out.RawString(prefix)
		if in.ReceiverName == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v7, v8 := range in.ReceiverName {
				if v7 > 0 {
					out.RawByte(',')
				}
				out.String(string(v8))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"attachment\":"
		out.RawString(prefix)
		if in.Attachment == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.Attachment {
				if v9 > 0 {
					out.RawByte(',')
				}
				out.String(string(v10))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"remark\":"
		out.RawString(prefix)
		if in.Remark == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Remark {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.String(string(v12))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Smtp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB3bcdb0EncodeGithubComHaleyLeoZhangEmailServerModelBo(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Smtp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB3bcdb0EncodeGithubComHaleyLeoZhangEmailServerModelBo(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Smtp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB3bcdb0DecodeGithubComHaleyLeoZhangEmailServerModelBo(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Smtp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB3bcdb0DecodeGithubComHaleyLeoZhangEmailServerModelBo(l, v)
}
