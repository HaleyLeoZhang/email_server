// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package bo

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6615c02eDecodeGithubComHaleyLeoZhangEmailServerModelBo(in *jlexer.Lexer, out *ConfigUploadFile) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Dir":
			out.Dir = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComHaleyLeoZhangEmailServerModelBo(out *jwriter.Writer, in ConfigUploadFile) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Dir\":"
		out.RawString(prefix[1:])
		out.String(string(in.Dir))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ConfigUploadFile) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComHaleyLeoZhangEmailServerModelBo(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ConfigUploadFile) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComHaleyLeoZhangEmailServerModelBo(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ConfigUploadFile) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComHaleyLeoZhangEmailServerModelBo(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ConfigUploadFile) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComHaleyLeoZhangEmailServerModelBo(l, v)
}
func easyjson6615c02eDecodeGithubComHaleyLeoZhangEmailServerModelBo1(in *jlexer.Lexer, out *ConfigSmtp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Port":
			out.Port = int(in.Int())
		case "Tls":
			out.Tls = bool(in.Bool())
		case "FromAddr":
			out.FromAddr = string(in.String())
		case "User":
			out.User = string(in.String())
		case "Password":
			out.Password = string(in.String())
		case "Host":
			out.Host = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComHaleyLeoZhangEmailServerModelBo1(out *jwriter.Writer, in ConfigSmtp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Port\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Port))
	}
	{
		const prefix string = ",\"Tls\":"
		out.RawString(prefix)
		out.Bool(bool(in.Tls))
	}
	{
		const prefix string = ",\"FromAddr\":"
		out.RawString(prefix)
		out.String(string(in.FromAddr))
	}
	{
		const prefix string = ",\"User\":"
		out.RawString(prefix)
		out.String(string(in.User))
	}
	{
		const prefix string = ",\"Password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"Host\":"
		out.RawString(prefix)
		out.String(string(in.Host))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ConfigSmtp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComHaleyLeoZhangEmailServerModelBo1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ConfigSmtp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComHaleyLeoZhangEmailServerModelBo1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ConfigSmtp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComHaleyLeoZhangEmailServerModelBo1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ConfigSmtp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComHaleyLeoZhangEmailServerModelBo1(l, v)
}
func easyjson6615c02eDecodeGithubComHaleyLeoZhangEmailServerModelBo2(in *jlexer.Lexer, out *ConfigEmail) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Smtp":
			(out.Smtp).UnmarshalEasyJSON(in)
		case "Driver":
			out.Driver = string(in.String())
		case "Consumer":
			out.Consumer = int(in.Int())
		case "BatchNumber":
			out.BatchNumber = int(in.Int())
		case "UploadFile":
			(out.UploadFile).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComHaleyLeoZhangEmailServerModelBo2(out *jwriter.Writer, in ConfigEmail) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Smtp\":"
		out.RawString(prefix[1:])
		(in.Smtp).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Driver\":"
		out.RawString(prefix)
		out.String(string(in.Driver))
	}
	{
		const prefix string = ",\"Consumer\":"
		out.RawString(prefix)
		out.Int(int(in.Consumer))
	}
	{
		const prefix string = ",\"BatchNumber\":"
		out.RawString(prefix)
		out.Int(int(in.BatchNumber))
	}
	{
		const prefix string = ",\"UploadFile\":"
		out.RawString(prefix)
		(in.UploadFile).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ConfigEmail) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComHaleyLeoZhangEmailServerModelBo2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ConfigEmail) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComHaleyLeoZhangEmailServerModelBo2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ConfigEmail) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComHaleyLeoZhangEmailServerModelBo2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ConfigEmail) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComHaleyLeoZhangEmailServerModelBo2(l, v)
}
